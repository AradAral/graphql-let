// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`graphql-let/loader generates files by .graphql 1`] = `
Array [
  "import * as Apollo from '@apollo/client';
const gql = Apollo.gql;
/** All built-in and custom scalars, mapped to their actual values */

export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    id
    name
    status
  }
}
    \`;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export function useViewerQuery(baseOptions) {
  return Apollo.useQuery(ViewerDocument, baseOptions);
}
export function useViewerLazyQuery(baseOptions) {
  return Apollo.useLazyQuery(ViewerDocument, baseOptions);
}",
]
`;

exports[`graphql-let/loader generates files by .tsx 1`] = `
Array [
  "import * as Vf9caa18689fd5fc145b366e28630414771b7f5a0 from \\"./../__generated__/pages/index-f9caa18689fd5fc145b366e28630414771b7f5a0.tsx\\";
const {
  useViewerQuery
} = Vf9caa18689fd5fc145b366e28630414771b7f5a0;
export default function Viewer() {
  const {
    data
  } = useViewerQuery();
  if (data) return /*#__PURE__*/React.createElement(\\"div\\", null, data.viewer.name);
}",
  "/* f9caa18689fd5fc145b366e28630414771b7f5a0
 * This file is automatically generated by graphql-let. */
import * as Apollo from '@apollo/client';
const gql = Apollo.gql;
/** All built-in and custom scalars, mapped to their actual values */

export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    name
  }
}
    \`;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export function useViewerQuery(baseOptions) {
  return Apollo.useQuery(ViewerDocument, baseOptions);
}
export function useViewerLazyQuery(baseOptions) {
  return Apollo.useLazyQuery(ViewerDocument, baseOptions);
}",
]
`;

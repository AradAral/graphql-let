// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`graphql-let/loader runs by GraphQL document files (.graphql) 1`] = `
Object {
  "./pages/viewer.graphql": "import * as Apollo from '@apollo/client';
const gql = Apollo.gql;
/** All built-in and custom scalars, mapped to their actual values */

export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    id
    name
    status
  }
}
    \`;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export function useViewerQuery(baseOptions) {
  return Apollo.useQuery(ViewerDocument, baseOptions);
}
export function useViewerLazyQuery(baseOptions) {
  return Apollo.useLazyQuery(ViewerDocument, baseOptions);
}",
}
`;

exports[`graphql-let/loader runs by GraphQL document files (.graphql): **/*.d.ts 1`] = `
Array [
  "pages/viewer.graphql.d.ts",
]
`;

exports[`graphql-let/loader runs by GraphQL document files (.graphql): pages/viewer.graphql.d.ts 1`] = `
"/* c2544ded7ae4f8763eb2f0a27218303c6f1ca946
 * This file is automatically generated by graphql-let. */

import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
};
export declare type Query = {
    __typename?: 'Query';
    viewer?: Maybe<User>;
};
export declare type User = {
    __typename?: 'User';
    id: Scalars['ID'];
    name: Scalars['String'];
    status: Scalars['String'];
};
export declare type ViewerQueryVariables = Exact<{
    [key: string]: never;
}>;
export declare type ViewerQuery = ({
    __typename?: 'Query';
} & {
    viewer?: Maybe<({
        __typename?: 'User';
    } & Pick<User, 'id' | 'name' | 'status'>)>;
});
export declare const ViewerDocument: Apollo.DocumentNode;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */
export declare function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryResult<ViewerQuery, Exact<{
    [key: string]: never;
}>>;
export declare function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryTuple<ViewerQuery, Exact<{
    [key: string]: never;
}>>;
export declare type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export declare type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export declare type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;
"
`;

exports[`graphql-let/loader runs by GraphQL document literals in .tsx 1`] = `
Object {
  "./__generated__/pages/index-f9caa18689fd5fc145b366e28630414771b7f5a0.tsx": "/* f9caa18689fd5fc145b366e28630414771b7f5a0
 * This file is automatically generated by graphql-let. */
import * as Apollo from '@apollo/client';
const gql = Apollo.gql;
/** All built-in and custom scalars, mapped to their actual values */

export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    name
  }
}
    \`;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export function useViewerQuery(baseOptions) {
  return Apollo.useQuery(ViewerDocument, baseOptions);
}
export function useViewerLazyQuery(baseOptions) {
  return Apollo.useLazyQuery(ViewerDocument, baseOptions);
}",
  "./pages/index.tsx": "import * as Vf9caa18689fd5fc145b366e28630414771b7f5a0 from \\"./../__generated__/pages/index-f9caa18689fd5fc145b366e28630414771b7f5a0.tsx\\";
const {
  useViewerQuery
} = Vf9caa18689fd5fc145b366e28630414771b7f5a0;
export default function Viewer() {
  const {
    data
  } = useViewerQuery();
  if (data) return /*#__PURE__*/React.createElement(\\"div\\", null, data.viewer.name);
}",
}
`;

exports[`graphql-let/loader runs by GraphQL document literals in .tsx: **/*.d.ts 1`] = `
Array [
  "node_modules/@types/graphql-let/index.d.ts",
  "node_modules/@types/graphql-let/pages/index-f9caa18689fd5fc145b366e28630414771b7f5a0.d.ts",
]
`;

exports[`graphql-let/loader runs by GraphQL document literals in .tsx: node_modules/@types/graphql-let/index.d.ts 1`] = `
"import Tf9caa18689fd5fc145b366e28630414771b7f5a0 from './pages/index-f9caa18689fd5fc145b366e28630414771b7f5a0.d.ts';
export default function gql(gql: \`
query Viewer {
  viewer { name }
}\`): Tf9caa18689fd5fc145b366e28630414771b7f5a0.__AllExports;
"
`;

exports[`graphql-let/loader runs by GraphQL document literals in .tsx: node_modules/@types/graphql-let/pages/index-f9caa18689fd5fc145b366e28630414771b7f5a0.d.ts 1`] = `
"/* f9caa18689fd5fc145b366e28630414771b7f5a0
 * This file is automatically generated by graphql-let. */

import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
  [key: string]: unknown;
}> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */

export declare type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};
export declare type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};
export declare type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};
export declare type ViewerQueryVariables = Exact<{
  [key: string]: never;
}>;
export declare type ViewerQuery = ({
  __typename?: 'Query';
} & {
  viewer?: Maybe<({
    __typename?: 'User';
  } & Pick<User, 'name'>)>;
});
export declare const ViewerDocument: Apollo.DocumentNode;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export declare function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryResult<ViewerQuery, Exact<{
  [key: string]: never;
}>>;
export declare function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryTuple<ViewerQuery, Exact<{
  [key: string]: never;
}>>;
export declare type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export declare type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export declare type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;
export declare type __AllExports = {
  Maybe: Maybe;
  Exact: Exact;
  Scalars: Scalars;
  Query: Query;
  User: User;
  ViewerQueryVariables: ViewerQueryVariables;
  ViewerQuery: ViewerQuery;
  ViewerDocument: ViewerDocument;
  useViewerQuery: typeof useViewerQuery;
  useViewerLazyQuery: typeof useViewerLazyQuery;
  ViewerQueryHookResult: ViewerQueryHookResult;
  ViewerLazyQueryHookResult: ViewerLazyQueryHookResult;
  ViewerQueryResult: ViewerQueryResult;
};"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR 1`] = `
Object {
  "./__generated__/pages/index-f9caa18689fd5fc145b366e28630414771b7f5a0.tsx": "/* f9caa18689fd5fc145b366e28630414771b7f5a0
 * This file is automatically generated by graphql-let. */
import * as Apollo from '@apollo/client';
const gql = Apollo.gql;
/** All built-in and custom scalars, mapped to their actual values */

export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    name
  }
}
    \`;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export function useViewerQuery(baseOptions) {
  return Apollo.useQuery(ViewerDocument, baseOptions);
}
export function useViewerLazyQuery(baseOptions) {
  return Apollo.useLazyQuery(ViewerDocument, baseOptions);
}",
  "./pages/index.tsx": "import * as Vf9caa18689fd5fc145b366e28630414771b7f5a0 from \\"./../__generated__/pages/index-f9caa18689fd5fc145b366e28630414771b7f5a0.tsx\\";
const {
  useViewerQuery
} = Vf9caa18689fd5fc145b366e28630414771b7f5a0;
export default function Viewer() {
  const {
    data
  } = useViewerQuery();
  if (data) return /*#__PURE__*/React.createElement(\\"div\\", null, data.viewer.name);
}",
  "./pages/viewer.graphql": "import * as Apollo from '@apollo/client';
const gql = Apollo.gql;
/** All built-in and custom scalars, mapped to their actual values */

export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    id
    name
    status
  }
}
    \`;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export function useViewerQuery(baseOptions) {
  return Apollo.useQuery(ViewerDocument, baseOptions);
}
export function useViewerLazyQuery(baseOptions) {
  return Apollo.useLazyQuery(ViewerDocument, baseOptions);
}",
  "./pages/viewer2.graphql": "import * as Apollo from '@apollo/client';
const gql = Apollo.gql;
/** All built-in and custom scalars, mapped to their actual values */

export const Viewer2Document = gql\`
    query Viewer2 {
  viewer {
    id
    name
    status
  }
}
    \`;
/**
 * __useViewer2Query__
 *
 * To run a query within a React component, call \`useViewer2Query\` and pass it any options that fit your needs.
 * When your component renders, \`useViewer2Query\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewer2Query({
 *   variables: {
 *   },
 * });
 */

export function useViewer2Query(baseOptions) {
  return Apollo.useQuery(Viewer2Document, baseOptions);
}
export function useViewer2LazyQuery(baseOptions) {
  return Apollo.useLazyQuery(Viewer2Document, baseOptions);
}",
}
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR: **/*.d.ts 1`] = `
Array [
  "node_modules/@types/graphql-let/index.d.ts",
  "node_modules/@types/graphql-let/pages/index-f9caa18689fd5fc145b366e28630414771b7f5a0.d.ts",
  "pages/viewer.graphql.d.ts",
  "pages/viewer2.graphql.d.ts",
]
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR: node_modules/@types/graphql-let/index.d.ts 1`] = `
"import Tf9caa18689fd5fc145b366e28630414771b7f5a0 from './pages/index-f9caa18689fd5fc145b366e28630414771b7f5a0.d.ts';
export default function gql(gql: \`
query Viewer {
  viewer { name }
}\`): Tf9caa18689fd5fc145b366e28630414771b7f5a0.__AllExports;
"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR: node_modules/@types/graphql-let/pages/index-f9caa18689fd5fc145b366e28630414771b7f5a0.d.ts 1`] = `
"/* f9caa18689fd5fc145b366e28630414771b7f5a0
 * This file is automatically generated by graphql-let. */

import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
  [key: string]: unknown;
}> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */

export declare type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};
export declare type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};
export declare type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};
export declare type ViewerQueryVariables = Exact<{
  [key: string]: never;
}>;
export declare type ViewerQuery = ({
  __typename?: 'Query';
} & {
  viewer?: Maybe<({
    __typename?: 'User';
  } & Pick<User, 'name'>)>;
});
export declare const ViewerDocument: Apollo.DocumentNode;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export declare function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryResult<ViewerQuery, Exact<{
  [key: string]: never;
}>>;
export declare function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryTuple<ViewerQuery, Exact<{
  [key: string]: never;
}>>;
export declare type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export declare type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export declare type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;
export declare type __AllExports = {
  Maybe: Maybe;
  Exact: Exact;
  Scalars: Scalars;
  Query: Query;
  User: User;
  ViewerQueryVariables: ViewerQueryVariables;
  ViewerQuery: ViewerQuery;
  ViewerDocument: ViewerDocument;
  useViewerQuery: typeof useViewerQuery;
  useViewerLazyQuery: typeof useViewerLazyQuery;
  ViewerQueryHookResult: ViewerQueryHookResult;
  ViewerLazyQueryHookResult: ViewerLazyQueryHookResult;
  ViewerQueryResult: ViewerQueryResult;
};"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR: pages/viewer.graphql.d.ts 1`] = `
"/* c2544ded7ae4f8763eb2f0a27218303c6f1ca946
 * This file is automatically generated by graphql-let. */

import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
};
export declare type Query = {
    __typename?: 'Query';
    viewer?: Maybe<User>;
};
export declare type User = {
    __typename?: 'User';
    id: Scalars['ID'];
    name: Scalars['String'];
    status: Scalars['String'];
};
export declare type ViewerQueryVariables = Exact<{
    [key: string]: never;
}>;
export declare type ViewerQuery = ({
    __typename?: 'Query';
} & {
    viewer?: Maybe<({
        __typename?: 'User';
    } & Pick<User, 'id' | 'name' | 'status'>)>;
});
export declare const ViewerDocument: Apollo.DocumentNode;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */
export declare function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryResult<ViewerQuery, Exact<{
    [key: string]: never;
}>>;
export declare function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryTuple<ViewerQuery, Exact<{
    [key: string]: never;
}>>;
export declare type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export declare type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export declare type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;
"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR: pages/viewer2.graphql.d.ts 1`] = `
"/* b59c7a69f3df19c99341dc0b437ba48831bd744d
 * This file is automatically generated by graphql-let. */

import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
};
export declare type Query = {
    __typename?: 'Query';
    viewer?: Maybe<User>;
};
export declare type User = {
    __typename?: 'User';
    id: Scalars['ID'];
    name: Scalars['String'];
    status: Scalars['String'];
};
export declare type Viewer2QueryVariables = Exact<{
    [key: string]: never;
}>;
export declare type Viewer2Query = ({
    __typename?: 'Query';
} & {
    viewer?: Maybe<({
        __typename?: 'User';
    } & Pick<User, 'id' | 'name' | 'status'>)>;
});
export declare const Viewer2Document: Apollo.DocumentNode;
/**
 * __useViewer2Query__
 *
 * To run a query within a React component, call \`useViewer2Query\` and pass it any options that fit your needs.
 * When your component renders, \`useViewer2Query\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewer2Query({
 *   variables: {
 *   },
 * });
 */
export declare function useViewer2Query(baseOptions?: Apollo.QueryHookOptions<Viewer2Query, Viewer2QueryVariables>): Apollo.QueryResult<Viewer2Query, Exact<{
    [key: string]: never;
}>>;
export declare function useViewer2LazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Viewer2Query, Viewer2QueryVariables>): Apollo.QueryTuple<Viewer2Query, Exact<{
    [key: string]: never;
}>>;
export declare type Viewer2QueryHookResult = ReturnType<typeof useViewer2Query>;
export declare type Viewer2LazyQueryHookResult = ReturnType<typeof useViewer2LazyQuery>;
export declare type Viewer2QueryResult = Apollo.QueryResult<Viewer2Query, Viewer2QueryVariables>;
"
`;
